declare i32 @scanf(i8*, ...)
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier_scan = constant [3 x i8] c"%d\00"
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
@.div_zero_error_msg = constant [24 x i8] c"Error division by zero\0A\00"
define i32 @readi(i32) {
  %ret_val = alloca i32
  %spec_ptr = getelementptr [3 x i8], [3 x i8]* @.int_specifier_scan, i32 0, i32 0
  call i32 (i8*, ...) @scanf(i8* %spec_ptr, i32* %ret_val)
  %val = load i32, i32* %ret_val
  ret i32 %val
}
define void @printi(i32) {
  %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
  call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
  ret void
}
define void @print(i8*) {
  %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
  call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
  ret void
}
define i32 @main() {
%var_1 = alloca i32
store i32 0, i32* %var_1
%var_2 = load i32, i32* %var_1
call void @printi(i32 %var_2)
%var_3 = add i32 8, 0
%var_4 = alloca i32
store i32 %var_3, i32* %var_4
%var_5 = load i32, i32* %var_4
call void @printi(i32 %var_5)
%var_6 = add i32 7, 0
store i32 %var_6, i32* %var_1
%var_7 = load i32, i32* %var_1
call void @printi(i32 %var_7)
%var_8 = load i32, i32* %var_1
store i32 %var_8, i32* %var_4
%var_9 = load i32, i32* %var_4
call void @printi(i32 %var_9)
ret i32 0
}
